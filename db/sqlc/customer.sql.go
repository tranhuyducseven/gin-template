// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: customer.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO
  "customer" (
    "username",
    "hashed_password",
    "fname",
    "lname",
    "sex",
    "dob",
    "phone",
    "email"
  )
VALUES
  ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, username, hashed_password, fname, lname, sex, dob, phone, email, password_changed_at, created_at
`

type CreateCustomerParams struct {
	Username       string         `json:"username"`
	HashedPassword string         `json:"hashed_password"`
	Fname          string         `json:"fname"`
	Lname          string         `json:"lname"`
	Sex            sql.NullString `json:"sex"`
	Dob            sql.NullTime   `json:"dob"`
	Phone          sql.NullString `json:"phone"`
	Email          sql.NullString `json:"email"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer,
		arg.Username,
		arg.HashedPassword,
		arg.Fname,
		arg.Lname,
		arg.Sex,
		arg.Dob,
		arg.Phone,
		arg.Email,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Fname,
		&i.Lname,
		&i.Sex,
		&i.Dob,
		&i.Phone,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customer
WHERE username = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, username)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, username, hashed_password, fname, lname, sex, dob, phone, email, password_changed_at, created_at FROM "customer" 
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, username string) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, username)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Fname,
		&i.Lname,
		&i.Sex,
		&i.Dob,
		&i.Phone,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, username, hashed_password, fname, lname, sex, dob, phone, email, password_changed_at, created_at FROM customer 
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCustomersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCustomers(ctx context.Context, arg ListCustomersParams) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, listCustomers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.HashedPassword,
			&i.Fname,
			&i.Lname,
			&i.Sex,
			&i.Dob,
			&i.Phone,
			&i.Email,
			&i.PasswordChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInfoCustomer = `-- name: UpdateInfoCustomer :one
UPDATE customer
SET sex = $2, dob = $3, phone = $4, email = $5
WHERE username = $1
RETURNING id, username, hashed_password, fname, lname, sex, dob, phone, email, password_changed_at, created_at
`

type UpdateInfoCustomerParams struct {
	Username string         `json:"username"`
	Sex      sql.NullString `json:"sex"`
	Dob      sql.NullTime   `json:"dob"`
	Phone    sql.NullString `json:"phone"`
	Email    sql.NullString `json:"email"`
}

func (q *Queries) UpdateInfoCustomer(ctx context.Context, arg UpdateInfoCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, updateInfoCustomer,
		arg.Username,
		arg.Sex,
		arg.Dob,
		arg.Phone,
		arg.Email,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Fname,
		&i.Lname,
		&i.Sex,
		&i.Dob,
		&i.Phone,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updatePasswordCustomer = `-- name: UpdatePasswordCustomer :one
UPDATE customer
SET hashed_password = $2, password_changed_at = $3
WHERE username = $1
RETURNING id, username, hashed_password, fname, lname, sex, dob, phone, email, password_changed_at, created_at
`

type UpdatePasswordCustomerParams struct {
	Username          string    `json:"username"`
	HashedPassword    string    `json:"hashed_password"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
}

func (q *Queries) UpdatePasswordCustomer(ctx context.Context, arg UpdatePasswordCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, updatePasswordCustomer, arg.Username, arg.HashedPassword, arg.PasswordChangedAt)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Fname,
		&i.Lname,
		&i.Sex,
		&i.Dob,
		&i.Phone,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
